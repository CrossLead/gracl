export function noop() { }
export function yes() { return true; }
export function baseCompare(a, b) {
    return Number(a > b) - Number(a < b);
}
export function binaryIndexOf(arr, el, compare = baseCompare) {
    let low = 0, high = arr.length - 1;
    while (low <= high) {
        const pivot = (high + low) >> 1, diff = compare(el, arr[pivot]);
        if (diff > 0)
            low = pivot + 1;
        else if (diff < 0)
            high = pivot - 1;
        else
            return pivot;
    }
    return -1;
}
export function permissionCompare(a, b) {
    return baseCompare(a.subjectId, b.subjectId);
}
export function permissionIndexOf(arr, subjectId) {
    return binaryIndexOf(arr, { subjectId }, permissionCompare);
}
export function getClassOf(node) {
    return Object.getPrototypeOf(node).constructor;
}
export function topologicalSort(nodes, nameKey = 'name', parentKey = 'parent') {
    const nodeList = [], noParentList = [], parentMapping = new Map(), remainingNodes = new Set(nodes.map(n => n[nameKey]));
    for (const schemaNode of nodes) {
        const name = schemaNode[nameKey], parentProp = schemaNode[parentKey];
        if (!name) {
            throw new Error(`No ${nameKey} field on node = ${schemaNode}`);
        }
        const parents = Array.isArray(parentProp)
            ? parentProp
            : [parentProp];
        if (!parentProp) {
            noParentList.push(schemaNode);
            remainingNodes.delete(schemaNode[nameKey]);
        }
        else {
            for (const parent of parents) {
                if (!parentMapping.has(parent)) {
                    parentMapping.set(parent, [schemaNode]);
                }
                else {
                    parentMapping.get(parent).push(schemaNode);
                }
            }
        }
    }
    while (noParentList.length) {
        const rootNode = noParentList.pop();
        nodeList.push(rootNode);
        if (parentMapping.has(rootNode[nameKey])) {
            const children = parentMapping.get(rootNode[nameKey]);
            while (children.length) {
                const child = children.pop();
                remainingNodes.delete(child[nameKey]);
                noParentList.push(child);
            }
        }
    }
    if (remainingNodes.size) {
        throw new Error('Schema has a circular dependency or a missing parent! Examine definitions for '
            + [...remainingNodes].map(x => `"${x}"`).join(', '));
    }
    return nodeList;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLHlCQUF5QixDQUFDO0FBQzFCLHdCQUF3QixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUV0Qyw0QkFBNEIsQ0FBTSxFQUFFLENBQU07SUFDeEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBRUQsOEJBQThCLEdBQVUsRUFBRSxFQUFPLEVBQUUsT0FBTyxHQUFHLFdBQVc7SUFDdEUsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUNQLElBQUksR0FBRyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUUxQixPQUFPLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNuQixNQUFNLEtBQUssR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQ3pCLElBQUksR0FBSSxPQUFPLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRXRDLEVBQUUsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7WUFBTyxHQUFHLEdBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztZQUFFLElBQUksR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLElBQUk7WUFBZ0IsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNuQyxDQUFDO0lBRUQsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ1osQ0FBQztBQUVELGtDQUFrQyxDQUFhLEVBQUUsQ0FBYTtJQUM1RCxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLFNB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